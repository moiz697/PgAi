// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xla/service/memory_space_assignment/memory_space_assignment.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_xla_2fservice_2fmemory_5fspace_5fassignment_2fmemory_5fspace_5fassignment_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_xla_2fservice_2fmemory_5fspace_5fassignment_2fmemory_5fspace_5fassignment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xla_2fservice_2fmemory_5fspace_5fassignment_2fmemory_5fspace_5fassignment_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_xla_2fservice_2fmemory_5fspace_5fassignment_2fmemory_5fspace_5fassignment_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_xla_2fservice_2fmemory_5fspace_5fassignment_2fmemory_5fspace_5fassignment_2eproto;
namespace xla {
namespace memory_space_assignment {
class MemoryBoundLoopOptimizerOptions;
struct MemoryBoundLoopOptimizerOptionsDefaultTypeInternal;
extern MemoryBoundLoopOptimizerOptionsDefaultTypeInternal _MemoryBoundLoopOptimizerOptions_default_instance_;
class SlicedPrefetchOptions;
struct SlicedPrefetchOptionsDefaultTypeInternal;
extern SlicedPrefetchOptionsDefaultTypeInternal _SlicedPrefetchOptions_default_instance_;
}  // namespace memory_space_assignment
}  // namespace xla
PROTOBUF_NAMESPACE_OPEN
template<> ::xla::memory_space_assignment::MemoryBoundLoopOptimizerOptions* Arena::CreateMaybeMessage<::xla::memory_space_assignment::MemoryBoundLoopOptimizerOptions>(Arena*);
template<> ::xla::memory_space_assignment::SlicedPrefetchOptions* Arena::CreateMaybeMessage<::xla::memory_space_assignment::SlicedPrefetchOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xla {
namespace memory_space_assignment {

// ===================================================================

class SlicedPrefetchOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.memory_space_assignment.SlicedPrefetchOptions) */ {
 public:
  inline SlicedPrefetchOptions() : SlicedPrefetchOptions(nullptr) {}
  ~SlicedPrefetchOptions() override;
  explicit PROTOBUF_CONSTEXPR SlicedPrefetchOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlicedPrefetchOptions(const SlicedPrefetchOptions& from);
  SlicedPrefetchOptions(SlicedPrefetchOptions&& from) noexcept
    : SlicedPrefetchOptions() {
    *this = ::std::move(from);
  }

  inline SlicedPrefetchOptions& operator=(const SlicedPrefetchOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlicedPrefetchOptions& operator=(SlicedPrefetchOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlicedPrefetchOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlicedPrefetchOptions* internal_default_instance() {
    return reinterpret_cast<const SlicedPrefetchOptions*>(
               &_SlicedPrefetchOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SlicedPrefetchOptions& a, SlicedPrefetchOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(SlicedPrefetchOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlicedPrefetchOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SlicedPrefetchOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SlicedPrefetchOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlicedPrefetchOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SlicedPrefetchOptions& from) {
    SlicedPrefetchOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlicedPrefetchOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.memory_space_assignment.SlicedPrefetchOptions";
  }
  protected:
  explicit SlicedPrefetchOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinBytesFieldNumber = 2,
    kMaxSlicesFieldNumber = 1,
    kFailOnNonAlignmentBoundarySliceProposalFieldNumber = 3,
  };
  // uint64 min_bytes = 2;
  void clear_min_bytes();
  uint64_t min_bytes() const;
  void set_min_bytes(uint64_t value);
  private:
  uint64_t _internal_min_bytes() const;
  void _internal_set_min_bytes(uint64_t value);
  public:

  // uint32 max_slices = 1;
  void clear_max_slices();
  uint32_t max_slices() const;
  void set_max_slices(uint32_t value);
  private:
  uint32_t _internal_max_slices() const;
  void _internal_set_max_slices(uint32_t value);
  public:

  // bool fail_on_non_alignment_boundary_slice_proposal = 3;
  void clear_fail_on_non_alignment_boundary_slice_proposal();
  bool fail_on_non_alignment_boundary_slice_proposal() const;
  void set_fail_on_non_alignment_boundary_slice_proposal(bool value);
  private:
  bool _internal_fail_on_non_alignment_boundary_slice_proposal() const;
  void _internal_set_fail_on_non_alignment_boundary_slice_proposal(bool value);
  public:

  // @@protoc_insertion_point(class_scope:xla.memory_space_assignment.SlicedPrefetchOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t min_bytes_;
    uint32_t max_slices_;
    bool fail_on_non_alignment_boundary_slice_proposal_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fservice_2fmemory_5fspace_5fassignment_2fmemory_5fspace_5fassignment_2eproto;
};
// -------------------------------------------------------------------

class MemoryBoundLoopOptimizerOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.memory_space_assignment.MemoryBoundLoopOptimizerOptions) */ {
 public:
  inline MemoryBoundLoopOptimizerOptions() : MemoryBoundLoopOptimizerOptions(nullptr) {}
  ~MemoryBoundLoopOptimizerOptions() override;
  explicit PROTOBUF_CONSTEXPR MemoryBoundLoopOptimizerOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryBoundLoopOptimizerOptions(const MemoryBoundLoopOptimizerOptions& from);
  MemoryBoundLoopOptimizerOptions(MemoryBoundLoopOptimizerOptions&& from) noexcept
    : MemoryBoundLoopOptimizerOptions() {
    *this = ::std::move(from);
  }

  inline MemoryBoundLoopOptimizerOptions& operator=(const MemoryBoundLoopOptimizerOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryBoundLoopOptimizerOptions& operator=(MemoryBoundLoopOptimizerOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryBoundLoopOptimizerOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryBoundLoopOptimizerOptions* internal_default_instance() {
    return reinterpret_cast<const MemoryBoundLoopOptimizerOptions*>(
               &_MemoryBoundLoopOptimizerOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MemoryBoundLoopOptimizerOptions& a, MemoryBoundLoopOptimizerOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryBoundLoopOptimizerOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryBoundLoopOptimizerOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryBoundLoopOptimizerOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemoryBoundLoopOptimizerOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemoryBoundLoopOptimizerOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MemoryBoundLoopOptimizerOptions& from) {
    MemoryBoundLoopOptimizerOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryBoundLoopOptimizerOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.memory_space_assignment.MemoryBoundLoopOptimizerOptions";
  }
  protected:
  explicit MemoryBoundLoopOptimizerOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDesiredCopyRatioFieldNumber = 2,
    kEnabledFieldNumber = 1,
    kAllowUnsatisfiedFullyPipelinedPrefetchFieldNumber = 3,
  };
  // optional float desired_copy_ratio = 2;
  bool has_desired_copy_ratio() const;
  private:
  bool _internal_has_desired_copy_ratio() const;
  public:
  void clear_desired_copy_ratio();
  float desired_copy_ratio() const;
  void set_desired_copy_ratio(float value);
  private:
  float _internal_desired_copy_ratio() const;
  void _internal_set_desired_copy_ratio(float value);
  public:

  // optional bool enabled = 1;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // optional bool allow_unsatisfied_fully_pipelined_prefetch = 3;
  bool has_allow_unsatisfied_fully_pipelined_prefetch() const;
  private:
  bool _internal_has_allow_unsatisfied_fully_pipelined_prefetch() const;
  public:
  void clear_allow_unsatisfied_fully_pipelined_prefetch();
  bool allow_unsatisfied_fully_pipelined_prefetch() const;
  void set_allow_unsatisfied_fully_pipelined_prefetch(bool value);
  private:
  bool _internal_allow_unsatisfied_fully_pipelined_prefetch() const;
  void _internal_set_allow_unsatisfied_fully_pipelined_prefetch(bool value);
  public:

  // @@protoc_insertion_point(class_scope:xla.memory_space_assignment.MemoryBoundLoopOptimizerOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float desired_copy_ratio_;
    bool enabled_;
    bool allow_unsatisfied_fully_pipelined_prefetch_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fservice_2fmemory_5fspace_5fassignment_2fmemory_5fspace_5fassignment_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SlicedPrefetchOptions

// uint32 max_slices = 1;
inline void SlicedPrefetchOptions::clear_max_slices() {
  _impl_.max_slices_ = 0u;
}
inline uint32_t SlicedPrefetchOptions::_internal_max_slices() const {
  return _impl_.max_slices_;
}
inline uint32_t SlicedPrefetchOptions::max_slices() const {
  // @@protoc_insertion_point(field_get:xla.memory_space_assignment.SlicedPrefetchOptions.max_slices)
  return _internal_max_slices();
}
inline void SlicedPrefetchOptions::_internal_set_max_slices(uint32_t value) {
  
  _impl_.max_slices_ = value;
}
inline void SlicedPrefetchOptions::set_max_slices(uint32_t value) {
  _internal_set_max_slices(value);
  // @@protoc_insertion_point(field_set:xla.memory_space_assignment.SlicedPrefetchOptions.max_slices)
}

// uint64 min_bytes = 2;
inline void SlicedPrefetchOptions::clear_min_bytes() {
  _impl_.min_bytes_ = uint64_t{0u};
}
inline uint64_t SlicedPrefetchOptions::_internal_min_bytes() const {
  return _impl_.min_bytes_;
}
inline uint64_t SlicedPrefetchOptions::min_bytes() const {
  // @@protoc_insertion_point(field_get:xla.memory_space_assignment.SlicedPrefetchOptions.min_bytes)
  return _internal_min_bytes();
}
inline void SlicedPrefetchOptions::_internal_set_min_bytes(uint64_t value) {
  
  _impl_.min_bytes_ = value;
}
inline void SlicedPrefetchOptions::set_min_bytes(uint64_t value) {
  _internal_set_min_bytes(value);
  // @@protoc_insertion_point(field_set:xla.memory_space_assignment.SlicedPrefetchOptions.min_bytes)
}

// bool fail_on_non_alignment_boundary_slice_proposal = 3;
inline void SlicedPrefetchOptions::clear_fail_on_non_alignment_boundary_slice_proposal() {
  _impl_.fail_on_non_alignment_boundary_slice_proposal_ = false;
}
inline bool SlicedPrefetchOptions::_internal_fail_on_non_alignment_boundary_slice_proposal() const {
  return _impl_.fail_on_non_alignment_boundary_slice_proposal_;
}
inline bool SlicedPrefetchOptions::fail_on_non_alignment_boundary_slice_proposal() const {
  // @@protoc_insertion_point(field_get:xla.memory_space_assignment.SlicedPrefetchOptions.fail_on_non_alignment_boundary_slice_proposal)
  return _internal_fail_on_non_alignment_boundary_slice_proposal();
}
inline void SlicedPrefetchOptions::_internal_set_fail_on_non_alignment_boundary_slice_proposal(bool value) {
  
  _impl_.fail_on_non_alignment_boundary_slice_proposal_ = value;
}
inline void SlicedPrefetchOptions::set_fail_on_non_alignment_boundary_slice_proposal(bool value) {
  _internal_set_fail_on_non_alignment_boundary_slice_proposal(value);
  // @@protoc_insertion_point(field_set:xla.memory_space_assignment.SlicedPrefetchOptions.fail_on_non_alignment_boundary_slice_proposal)
}

// -------------------------------------------------------------------

// MemoryBoundLoopOptimizerOptions

// optional bool enabled = 1;
inline bool MemoryBoundLoopOptimizerOptions::_internal_has_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MemoryBoundLoopOptimizerOptions::has_enabled() const {
  return _internal_has_enabled();
}
inline void MemoryBoundLoopOptimizerOptions::clear_enabled() {
  _impl_.enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool MemoryBoundLoopOptimizerOptions::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool MemoryBoundLoopOptimizerOptions::enabled() const {
  // @@protoc_insertion_point(field_get:xla.memory_space_assignment.MemoryBoundLoopOptimizerOptions.enabled)
  return _internal_enabled();
}
inline void MemoryBoundLoopOptimizerOptions::_internal_set_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.enabled_ = value;
}
inline void MemoryBoundLoopOptimizerOptions::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:xla.memory_space_assignment.MemoryBoundLoopOptimizerOptions.enabled)
}

// optional float desired_copy_ratio = 2;
inline bool MemoryBoundLoopOptimizerOptions::_internal_has_desired_copy_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MemoryBoundLoopOptimizerOptions::has_desired_copy_ratio() const {
  return _internal_has_desired_copy_ratio();
}
inline void MemoryBoundLoopOptimizerOptions::clear_desired_copy_ratio() {
  _impl_.desired_copy_ratio_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float MemoryBoundLoopOptimizerOptions::_internal_desired_copy_ratio() const {
  return _impl_.desired_copy_ratio_;
}
inline float MemoryBoundLoopOptimizerOptions::desired_copy_ratio() const {
  // @@protoc_insertion_point(field_get:xla.memory_space_assignment.MemoryBoundLoopOptimizerOptions.desired_copy_ratio)
  return _internal_desired_copy_ratio();
}
inline void MemoryBoundLoopOptimizerOptions::_internal_set_desired_copy_ratio(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.desired_copy_ratio_ = value;
}
inline void MemoryBoundLoopOptimizerOptions::set_desired_copy_ratio(float value) {
  _internal_set_desired_copy_ratio(value);
  // @@protoc_insertion_point(field_set:xla.memory_space_assignment.MemoryBoundLoopOptimizerOptions.desired_copy_ratio)
}

// optional bool allow_unsatisfied_fully_pipelined_prefetch = 3;
inline bool MemoryBoundLoopOptimizerOptions::_internal_has_allow_unsatisfied_fully_pipelined_prefetch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MemoryBoundLoopOptimizerOptions::has_allow_unsatisfied_fully_pipelined_prefetch() const {
  return _internal_has_allow_unsatisfied_fully_pipelined_prefetch();
}
inline void MemoryBoundLoopOptimizerOptions::clear_allow_unsatisfied_fully_pipelined_prefetch() {
  _impl_.allow_unsatisfied_fully_pipelined_prefetch_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool MemoryBoundLoopOptimizerOptions::_internal_allow_unsatisfied_fully_pipelined_prefetch() const {
  return _impl_.allow_unsatisfied_fully_pipelined_prefetch_;
}
inline bool MemoryBoundLoopOptimizerOptions::allow_unsatisfied_fully_pipelined_prefetch() const {
  // @@protoc_insertion_point(field_get:xla.memory_space_assignment.MemoryBoundLoopOptimizerOptions.allow_unsatisfied_fully_pipelined_prefetch)
  return _internal_allow_unsatisfied_fully_pipelined_prefetch();
}
inline void MemoryBoundLoopOptimizerOptions::_internal_set_allow_unsatisfied_fully_pipelined_prefetch(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.allow_unsatisfied_fully_pipelined_prefetch_ = value;
}
inline void MemoryBoundLoopOptimizerOptions::set_allow_unsatisfied_fully_pipelined_prefetch(bool value) {
  _internal_set_allow_unsatisfied_fully_pipelined_prefetch(value);
  // @@protoc_insertion_point(field_set:xla.memory_space_assignment.MemoryBoundLoopOptimizerOptions.allow_unsatisfied_fully_pipelined_prefetch)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace memory_space_assignment
}  // namespace xla

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_xla_2fservice_2fmemory_5fspace_5fassignment_2fmemory_5fspace_5fassignment_2eproto
