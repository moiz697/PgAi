/* Autogenerated by mlir-tblgen; don't manually edit. */
//===----------------------------------------------------------------------===//
// GPU Group Registration
//===----------------------------------------------------------------------===//

void mlirRegisterGPUPasses(void) {
  registerGPUPasses();
}

MlirPass mlirCreateGPUGpuAsyncRegionPass(void) {
  return wrap(mlir::createGpuAsyncRegionPass().release());
}
void mlirRegisterGPUGpuAsyncRegionPass(void) {
  registerGpuAsyncRegionPass();
}


MlirPass mlirCreateGPUGpuDecomposeMemrefsPass(void) {
  return wrap(mlir::createGpuDecomposeMemrefsPass().release());
}
void mlirRegisterGPUGpuDecomposeMemrefsPass(void) {
  registerGpuDecomposeMemrefsPass();
}


MlirPass mlirCreateGPUGpuKernelOutlining(void) {
  return wrap(mlir::createGpuKernelOutliningPass().release());
}
void mlirRegisterGPUGpuKernelOutlining(void) {
  registerGpuKernelOutlining();
}


MlirPass mlirCreateGPUGpuLaunchSinkIndexComputations(void) {
  return wrap(mlir::createGpuLauchSinkIndexComputationsPass().release());
}
void mlirRegisterGPUGpuLaunchSinkIndexComputations(void) {
  registerGpuLaunchSinkIndexComputations();
}


MlirPass mlirCreateGPUGpuMapParallelLoopsPass(void) {
  return wrap(mlir::createGpuMapParallelLoopsPass().release());
}
void mlirRegisterGPUGpuMapParallelLoopsPass(void) {
  registerGpuMapParallelLoopsPass();
}


MlirPass mlirCreateGPUGpuModuleToBinaryPass(void) {
  return wrap(createGpuModuleToBinaryPass().release());
}
void mlirRegisterGPUGpuModuleToBinaryPass(void) {
  registerGpuModuleToBinaryPass();
}


MlirPass mlirCreateGPUGpuNVVMAttachTarget(void) {
  return wrap(createGpuNVVMAttachTarget().release());
}
void mlirRegisterGPUGpuNVVMAttachTarget(void) {
  registerGpuNVVMAttachTarget();
}


MlirPass mlirCreateGPUGpuROCDLAttachTarget(void) {
  return wrap(createGpuROCDLAttachTarget().release());
}
void mlirRegisterGPUGpuROCDLAttachTarget(void) {
  registerGpuROCDLAttachTarget();
}

